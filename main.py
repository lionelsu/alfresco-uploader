import sys
import os
import requests
import json
from datetime import datetime, timedelta
import traceback
import time
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, BarColumn, TextColumn, TimeRemainingColumn
from rich.layout import Layout
from rich.live import Live
from rich.text import Text

# --- Base do projeto ---
if getattr(sys, 'frozen', False):
    BASE_DIR = os.path.dirname(sys.executable)
else:
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))

CONFIG_DIR = os.path.join(BASE_DIR, "config")
LOGS_DIR = os.path.join(BASE_DIR, "logs")
os.makedirs(LOGS_DIR, exist_ok=True)

CONFIG_FILE = os.path.join(CONFIG_DIR, "config.json")
with open(CONFIG_FILE, "r", encoding="utf-8") as f:
    config = json.load(f)

ALFRESCO_URL = config.get("ALFRESCO_URL")
USERNAME = config.get("USERNAME")
PASSWORD = config.get("PASSWORD")
SITE = config.get("SITE")
LOCAL_DIR = config.get("LOCAL_DIR")

if not os.path.isdir(LOCAL_DIR):
    print(f"‚ùå Caminho inv√°lido: {LOCAL_DIR}")
    input("Pressione ENTER para sair...")
    exit(1)

timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
LOG_FILE = os.path.join(LOGS_DIR, f"upload_log_{timestamp}.txt")


# N√£o criamos a sess√£o global aqui - ser√° criada e recriada quando necess√°rio

class UploadManager:
    def __init__(self):
        self.console = Console()
        self.layout = Layout()
        self.layout.split(
            Layout(name="main", ratio=4),
            Layout(name="footer", size=3)
        )

        self.progress = Progress(
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
            TextColumn("‚Ä¢"),
            TextColumn("[progress.completed]{task.completed}/{task.total} arquivos"),
            TextColumn("‚Ä¢"),
            TextColumn("{task.fields[processed_size]}"),
            TextColumn("‚Ä¢"),
            TimeRemainingColumn()
        )

        self.log_content = []
        self.stats = {
            'total_files': 0,
            'uploaded_files': 0,
            'skipped_files': 0,
            'created_folders': 0,
            'skipped_folders': 0,
            'total_size_bytes': 0,
            'uploaded_size_bytes': 0,
            'skipped_size_bytes': 0
        }
        self.task_id = None
        self.start_time = None
        self.live = None
        self.current_depth = 0
        self.session = None  # Sess√£o ser√° criada quando necess√°rio

    def create_session(self):
        """Cria uma nova sess√£o autenticada"""
        if self.session:
            self.session.close()  # Fecha a sess√£o anterior se existir

        self.session = requests.Session()
        self.session.auth = (USERNAME, PASSWORD)
        # Configura timeout para evitar esperas infinitas
        self.session.timeout = 30
        return self.session

    def get_session(self):
        """Retorna a sess√£o atual ou cria uma nova"""
        if not self.session:
            self.create_session()
        return self.session

    def format_size(self, bytes_size):
        """Formata bytes para formato leg√≠vel (KB, MB, GB)"""
        if bytes_size == 0:
            return "0B"

        size_names = ["B", "KB", "MB", "GB", "TB"]
        i = 0
        while bytes_size >= 1024 and i < len(size_names) - 1:
            bytes_size /= 1024.0
            i += 1

        return f"{bytes_size:.2f} {size_names[i]}"

    def log(self, msg, depth=0):
        """Adiciona mensagem ao log e ao arquivo"""
        timestamp = datetime.now().strftime("%H:%M:%S")

        # Adiciona indenta√ß√£o baseada na profundidade
        indent = "  " * depth
        log_msg = f"[{timestamp}] {indent}{msg}"

        self.log_content.append(log_msg)

        # Mant√©m apenas as √∫ltimas 100 linhas no log para display
        if len(self.log_content) > 100:
            self.log_content = self.log_content[-100:]

        # Escreve no arquivo de log
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(log_msg + "\n")

        # Atualiza o layout se estiver em execu√ß√£o
        if self.live:
            self.live.update(self.render_layout())

    def update_progress(self):
        """Atualiza a barra de progresso"""
        if self.task_id is not None:
            processed_files = self.stats['uploaded_files'] + self.stats['skipped_files']
            processed_size = self.stats['uploaded_size_bytes'] + self.stats['skipped_size_bytes']
            total_size = self.stats['total_size_bytes']

            self.progress.update(
                self.task_id,
                completed=processed_files,
                processed_size=f"{self.format_size(processed_size)}/{self.format_size(total_size)}"
            )

    def render_layout(self):
        """Renderiza o layout com as duas janelas"""
        # Janela principal com logs
        if self.log_content:
            # Pega as √∫ltimas 30 linhas para display
            display_logs = self.log_content[-30:]
            log_text = "\n".join(display_logs)
        else:
            log_text = "Aguardando in√≠cio do upload..."

        main_panel = Panel(
            log_text,
            title="Logs de Upload",
            border_style="blue",
            padding=(0, 1)
        )

        # Footer com progresso
        footer_panel = Panel(
            self.progress,
            title="Progresso",
            border_style="green"
        )

        # Atualiza os layouts
        self.layout["main"].update(main_panel)
        self.layout["footer"].update(footer_panel)

        return self.layout

    def get_document_library_node(self):
        """Obt√©m o n√≥ da document library com retry e reconex√£o"""
        max_retries = 3
        retry_delay = 5  # segundos

        for attempt in range(max_retries):
            try:
                # Cria nova sess√£o para cada tentativa
                session = self.create_session()
                url = f"{ALFRESCO_URL}/api/-default-/public/alfresco/versions/1/sites/{SITE}/containers/documentLibrary"
                resp = session.get(url)
                resp.raise_for_status()
                return resp.json()["entry"]["id"]

            except (requests.exceptions.RequestException, requests.exceptions.HTTPError) as e:
                if attempt < max_retries - 1:
                    self.log(f"‚ö†Ô∏è  Erro de conex√£o (tentativa {attempt + 1}/{max_retries}): {e}")
                    self.log(f"üîÑ Recriando sess√£o e tentando novamente em {retry_delay * (attempt + 1)} segundos...")
                    time.sleep(retry_delay * (attempt + 1))
                else:
                    raise

    def ensure_folder(self, parent_id, folder_name, depth=0):
        """Cria pasta com retry e reconex√£o para erros de rede"""
        max_retries = 3
        retry_delay = 900

        for attempt in range(max_retries):
            try:
                # Cria nova sess√£o para cada tentativa
                session = self.create_session()

                # Primeiro, verifica se a pasta j√° existe
                url = f"{ALFRESCO_URL}/api/-default-/public/alfresco/versions/1/nodes/{parent_id}/children?where=(isFolder=true)"
                resp = session.get(url)
                resp.raise_for_status()

                for entry in resp.json()["list"]["entries"]:
                    if entry["entry"]["name"] == folder_name:
                        self.log(f"üìÅ Pasta j√° existe: {folder_name}", depth)
                        self.stats['skipped_folders'] += 1
                        return entry["entry"]["id"]

                # Se n√£o existe, tenta criar
                url = f"{ALFRESCO_URL}/api/-default-/public/alfresco/versions/1/nodes/{parent_id}/children"
                data = {"name": folder_name, "nodeType": "cm:folder"}
                resp = session.post(url, json=data)
                resp.raise_for_status()
                folder_id = resp.json()["entry"]["id"]
                self.log(f"üìÅ Criada pasta: {folder_name}", depth)
                self.stats['created_folders'] += 1
                return folder_id

            except requests.exceptions.HTTPError as e:
                if e.response.status_code == 409:
                    # Se a pasta j√° existe (409), fazer uma nova busca
                    self.log(f"‚Ñπ Pasta j√° existe (409): {folder_name}", depth)
                    self.stats['skipped_folders'] += 1

                    # Buscar a pasta novamente
                    session = self.get_session()
                    url = f"{ALFRESCO_URL}/api/-default-/public/alfresco/versions/1/nodes/{parent_id}/children?where=(isFolder=true)"
                    resp = session.get(url)
                    resp.raise_for_status()
                    entries = resp.json()["list"]["entries"]

                    if entries:
                        return entries[0]["entry"]["id"]
                    else:
                        url = f"{ALFRESCO_URL}/api/-default-/public/alfresco/versions/1/nodes/{parent_id}/children"
                        resp = session.get(url)
                        resp.raise_for_status()

                        for entry in resp.json()["list"]["entries"]:
                            if entry["entry"]["name"] == folder_name and entry["entry"]["isFolder"]:
                                return entry["entry"]["id"]

                        raise Exception(f"Pasta '{folder_name}' n√£o encontrada ap√≥s erro 409")
                else:
                    if attempt < max_retries - 1:
                        self.log(
                            f"‚ö†Ô∏è  Erro HTTP {e.response.status_code} na pasta '{folder_name}' (tentativa {attempt + 1}/{max_retries})",
                            depth)
                        self.log(f"üîÑ Recriando sess√£o e tentando novamente...")
                        time.sleep(retry_delay * (attempt + 1))
                    else:
                        raise

            except requests.exceptions.RequestException as e:
                if attempt < max_retries - 1:
                    self.log(f"‚ö†Ô∏è  Erro de rede na pasta '{folder_name}' (tentativa {attempt + 1}/{max_retries}): {e}",
                             depth)
                    self.log(f"üîÑ Recriando sess√£o e tentando novamente...")
                    time.sleep(retry_delay * (attempt + 1))
                else:
                    raise

    def file_exists(self, parent_id, file_name):
        """Verifica se arquivo existe com retry e reconex√£o"""
        max_retries = 3
        retry_delay = 900

        for attempt in range(max_retries):
            try:
                # Cria nova sess√£o para cada tentativa
                session = self.create_session()
                url = f"{ALFRESCO_URL}/api/-default-/public/alfresco/versions/1/nodes/{parent_id}/children?where=(isFile=true)"
                resp = session.get(url)
                resp.raise_for_status()
                for entry in resp.json()["list"]["entries"]:
                    if entry["entry"]["name"] == file_name:
                        return True
                return False
            except requests.exceptions.RequestException as e:
                if attempt < max_retries - 1:
                    self.log(f"‚ö†Ô∏è  Erro ao verificar arquivo '{file_name}' (tentativa {attempt + 1}/{max_retries})")
                    time.sleep(retry_delay * (attempt + 1))
                else:
                    raise

    def upload_file(self, parent_id, file_path, depth=0):
        """Upload de arquivo com retry e reconex√£o para erros de rede"""
        file_name = os.path.basename(file_path)
        file_size = os.path.getsize(file_path)

        max_retries = 3
        retry_delay = 900

        for attempt in range(max_retries):
            try:
                # Cria nova sess√£o para cada tentativa
                session = self.create_session()

                if self.file_exists(parent_id, file_name):
                    self.log(f"‚Ñπ Arquivo j√° existe, pulando: {file_name} ({self.format_size(file_size)})", depth)
                    self.stats['skipped_files'] += 1
                    self.stats['skipped_size_bytes'] += file_size
                    self.update_progress()
                    return

                url = f"{ALFRESCO_URL}/api/-default-/public/alfresco/versions/1/nodes/{parent_id}/children"
                with open(file_path, "rb") as f:
                    files = {
                        "filedata": (file_name, f),
                        "name": (None, file_name)
                    }
                    resp = session.post(url, files=files)
                    resp.raise_for_status()

                self.log(f"üìÑ Enviado: {file_name} ({self.format_size(file_size)})", depth)
                self.stats['uploaded_files'] += 1
                self.stats['uploaded_size_bytes'] += file_size
                self.update_progress()
                return  # Sucesso, sai do loop

            except requests.exceptions.HTTPError as e:
                if e.response.status_code == 409:
                    self.log(f"‚Ñπ Arquivo j√° existe (409), pulando: {file_name} ({self.format_size(file_size)})", depth)
                    self.stats['skipped_files'] += 1
                    self.stats['skipped_size_bytes'] += file_size
                    self.update_progress()
                    return
                else:
                    if attempt < max_retries - 1:
                        self.log(
                            f"‚ö†Ô∏è  Erro HTTP {e.response.status_code} no arquivo '{file_name}' (tentativa {attempt + 1}/{max_retries})",
                            depth)
                        self.log(f"üîÑ Recriando sess√£o e tentando novamente...")
                        time.sleep(retry_delay * (attempt + 1))
                    else:
                        raise

            except requests.exceptions.RequestException as e:
                if attempt < max_retries - 1:
                    self.log(f"‚ö†Ô∏è  Erro de rede no arquivo '{file_name}' (tentativa {attempt + 1}/{max_retries}): {e}",
                             depth)
                    self.log(f"üîÑ Recriando sess√£o e tentando novamente...")
                    time.sleep(retry_delay * (attempt + 1))
                else:
                    raise

    def calculate_total_files_and_size(self, local_dir):
        """Calcula o total de arquivos e tamanho total"""
        total_files = 0
        total_size = 0

        for root, dirs, files in os.walk(local_dir):
            total_files += len(files)
            for file in files:
                file_path = os.path.join(root, file)
                try:
                    total_size += os.path.getsize(file_path)
                except OSError:
                    # Se n√£o conseguir obter o tamanho, ignora
                    pass

        return total_files, total_size

    def upload_directory(self, local_dir, parent_id):
        """Processa o upload recursivamente"""
        total_files, total_size = self.calculate_total_files_and_size(local_dir)
        self.stats['total_files'] = total_files
        self.stats['total_size_bytes'] = total_size

        # Inicia a barra de progresso
        self.task_id = self.progress.add_task(
            "[green]Uploading...",
            total=total_files,
            processed_size=f"0B/{self.format_size(total_size)}"
        )

        self.start_time = datetime.now()
        self.log(f"üìä Iniciando upload: {total_files} arquivos, {self.format_size(total_size)}")

        # Processa recursivamente
        for root, dirs, files in os.walk(local_dir):
            relative_path = os.path.relpath(root, local_dir)
            current_parent = parent_id
            depth = 0

            if relative_path != ".":
                parts = relative_path.split(os.sep)
                depth = len(parts)  # Profundidade baseada no n√∫mero de pastas

                for part in parts:
                    current_parent = self.ensure_folder(current_parent, part, depth)
                    depth += 1  # Aumenta a profundidade para arquivos dentro desta pasta

            # Processa arquivos com profundidade +1
            for file in files:
                self.upload_file(current_parent, os.path.join(root, file), depth + 1)

    def show_final_report(self):
        """Exibe relat√≥rio final"""
        processed_files = self.stats['uploaded_files'] + self.stats['skipped_files']
        processed_size = self.stats['uploaded_size_bytes'] + self.stats['skipped_size_bytes']
        success_rate = (self.stats['uploaded_files'] / processed_files * 100) if processed_files > 0 else 0

        if self.start_time:
            end_time = datetime.now()
            duration = end_time - self.start_time
            duration_str = str(duration).split('.')[0]  # Remove microsegundos
        else:
            duration_str = "N/A"

        report = f"""
üìä RELAT√ìRIO FINAL:

‚Ä¢ üìÇ Total de arquivos encontrados: {self.stats['total_files']}
‚Ä¢ üìÑ Arquivos processados: {processed_files}
‚Ä¢ ‚úÖ Arquivos enviados: {self.stats['uploaded_files']} ({self.format_size(self.stats['uploaded_size_bytes'])})
‚Ä¢ ‚è≠Ô∏è Arquivos pulados (j√° existiam): {self.stats['skipped_files']} ({self.format_size(self.stats['skipped_size_bytes'])})
‚Ä¢ üìÅ Pastas criadas: {self.stats['created_folders']}
‚Ä¢ ‚è≠Ô∏è Pastas puladas (j√° existiam): {self.stats['skipped_folders']}
‚Ä¢ üíæ Tamanho total: {self.format_size(self.stats['total_size_bytes'])}
‚Ä¢ üíæ Tamanho processado: {self.format_size(processed_size)}
‚Ä¢ üíæ Tamanho enviado: {self.format_size(self.stats['uploaded_size_bytes'])}
‚Ä¢ üíæ Tamanho pulado: {self.format_size(self.stats['skipped_size_bytes'])}
‚Ä¢ üìà Taxa de sucesso: {success_rate:.1f}%
‚Ä¢ ‚è±Ô∏è  Tempo total: {duration_str}

Log salvo em: {LOG_FILE}
        """

        self.console.print(Panel(report, title="Relat√≥rio de Execu√ß√£o", border_style="yellow"))

    def run(self):
        """Executa o processo completo"""
        try:
            # Primeiro, inicializa o layout
            initial_layout = self.render_layout()

            with Live(initial_layout, refresh_per_second=4, screen=True) as live:
                self.live = live  # Guarda refer√™ncia para atualiza√ß√µes

                doclib_id = self.get_document_library_node()
                self.log(f"üìÇ Conectado ao Alfresco. Iniciando upload da pasta: {LOCAL_DIR}")
                self.upload_directory(LOCAL_DIR, doclib_id)
                self.log("‚úÖ Upload completo!")

                # Atualiza o layout final
                live.update(self.render_layout())

        except Exception as e:
            err_msg = f"‚ùå Exce√ß√£o n√£o tratada: {e}\n{traceback.format_exc()}"
            self.log(err_msg)
            self.console.print(Panel(err_msg, title="Erro", border_style="red"))
        finally:
            self.live = None  # Limpa refer√™ncia
            if self.session:
                self.session.close()  # Fecha a sess√£o ao finalizar
            self.show_final_report()
            input("\nPressione ENTER para fechar...")


if __name__ == "__main__":
    manager = UploadManager()
    manager.run()